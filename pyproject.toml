[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "time-series-ensemble"
version = "0.1.0"
description = "Multi-Agent Time Series Forecasting Ensemble with Local LLM Orchestration"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["time-series", "forecasting", "multi-agent", "ollama", "ensemble"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "crewai",
    "darts",
    "sktime",
    "statsmodels",
    "pandas",
    "numpy",
    "scikit-learn",
    "fastapi",
    "loguru",
    "psutil",
    "structlog",
    "uvicorn[standard]",
    "ollama",
    "pydantic-settings",
    "lightgbm",
    "streamlit",
    "catboost",
    "pmdarima",
    "local-llm-function-calling",
    "pydantic",
    "prophet",
    "pydantic-settings",
    "aiofiles",
    "httpx",
    "rich",
    "typer",
    "pytest-asyncio",
    "asyncio-mqtt",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "black",
    "isort",
    "mypy",
    "pre-commit",
    "ruff",
]
gpu = [
    "torch",
    "tensorflow",
]
viz = [
    "plotly",
    "matplotlib",
    "seaborn",
]

[project.urls]
Homepage = "https://github.com/yourusername/time-series-ensemble"
Documentation = "https://time-series-ensemble.readthedocs.io/"
Repository = "https://github.com/yourusername/time-series-ensemble.git"
Issues = "https://github.com/yourusername/time-series-ensemble/issues"

[project.scripts]
ts-ensemble = "src.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
